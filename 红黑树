红黑树的出现解决了二叉查找树（BST）插入新节点导致的不平衡

在链表中，插入、删除速度很快，但查找速度较慢。
在数组中，查找速度很快，但插入删除速度很慢。
为了解决这个问题，找寻一种能够在插入、删除、查找、遍历等操作都相对快的容器，于是人们发明了二叉树。

二叉查找树（BST）具备的特性（二分查找的思想）

1.左子树上所有结点的值均小于或等于它的根结点的值。
2.右子树上所有结点的值均大于或等于它的根结点的值。
3.左、右子树也分别为二叉排序树。
它查找所需最大次数是二叉树的高度

红黑树是一种自平衡的二叉查找树

1.节点是红色或黑色。
2.根节点是黑色。
3.每个叶子节点都是黑色的空节点（NIL节点）。
4 每个红色节点的两个子节点都是黑色。(从每个叶子到根的所有路径上不能有两个连续的红色节点)
5.从任一节点到其每个叶子的所有路径都包含相同数目的黑色节点。

红黑树从根到叶子的最长路径不会超过最短路径的两倍

红黑树的应用：
JDK中集合类TreeMap和TreeSet用到了红黑树，Java8中，HashMap用到了红黑树

        二分查找         二叉树
查找    O（logn）          O（logn）
插入    O（n）             O（logn）
删除    O（n）             O（logn）

二叉树插入和删除速度都快.

二叉树的缺点是,不能随机访问
